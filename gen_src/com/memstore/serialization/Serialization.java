// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serialization.proto

package com.memstore.serialization;

public final class Serialization {
  private Serialization() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class PBEntity extends
      com.google.protobuf.GeneratedMessage {
    // Use PBEntity.newBuilder() to construct.
    private PBEntity() {
      initFields();
    }
    private PBEntity(boolean noInit) {}
    
    private static final PBEntity defaultInstance;
    public static PBEntity getDefaultInstance() {
      return defaultInstance;
    }
    
    public PBEntity getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.memstore.serialization.Serialization.internal_static_com_memstore_PBEntity_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.memstore.serialization.Serialization.internal_static_com_memstore_PBEntity_fieldAccessorTable;
    }
    
    // required uint32 bitmap = 1;
    public static final int BITMAP_FIELD_NUMBER = 1;
    private boolean hasBitmap;
    private int bitmap_ = 0;
    public boolean hasBitmap() { return hasBitmap; }
    public int getBitmap() { return bitmap_; }
    
    // repeated uint32 poolIndexes = 2;
    public static final int POOLINDEXES_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> poolIndexes_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getPoolIndexesList() {
      return poolIndexes_;
    }
    public int getPoolIndexesCount() { return poolIndexes_.size(); }
    public int getPoolIndexes(int index) {
      return poolIndexes_.get(index);
    }
    
    // optional uint32 notPooledBitmap = 3;
    public static final int NOTPOOLEDBITMAP_FIELD_NUMBER = 3;
    private boolean hasNotPooledBitmap;
    private int notPooledBitmap_ = 0;
    public boolean hasNotPooledBitmap() { return hasNotPooledBitmap; }
    public int getNotPooledBitmap() { return notPooledBitmap_; }
    
    // repeated .com.memstore.PBValue notPooledValue = 4;
    public static final int NOTPOOLEDVALUE_FIELD_NUMBER = 4;
    private java.util.List<com.memstore.serialization.Serialization.PBValue> notPooledValue_ =
      java.util.Collections.emptyList();
    public java.util.List<com.memstore.serialization.Serialization.PBValue> getNotPooledValueList() {
      return notPooledValue_;
    }
    public int getNotPooledValueCount() { return notPooledValue_.size(); }
    public com.memstore.serialization.Serialization.PBValue getNotPooledValue(int index) {
      return notPooledValue_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasBitmap) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasBitmap()) {
        output.writeUInt32(1, getBitmap());
      }
      for (int element : getPoolIndexesList()) {
        output.writeUInt32(2, element);
      }
      if (hasNotPooledBitmap()) {
        output.writeUInt32(3, getNotPooledBitmap());
      }
      for (com.memstore.serialization.Serialization.PBValue element : getNotPooledValueList()) {
        output.writeMessage(4, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasBitmap()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, getBitmap());
      }
      {
        int dataSize = 0;
        for (int element : getPoolIndexesList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getPoolIndexesList().size();
      }
      if (hasNotPooledBitmap()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, getNotPooledBitmap());
      }
      for (com.memstore.serialization.Serialization.PBValue element : getNotPooledValueList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.memstore.serialization.Serialization.PBEntity parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBEntity parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBEntity parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBEntity parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBEntity parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBEntity parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBEntity parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.memstore.serialization.Serialization.PBEntity parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.memstore.serialization.Serialization.PBEntity parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBEntity parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.memstore.serialization.Serialization.PBEntity prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.memstore.serialization.Serialization.PBEntity result;
      
      // Construct using com.memstore.serialization.Serialization.PBEntity.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.memstore.serialization.Serialization.PBEntity();
        return builder;
      }
      
      protected com.memstore.serialization.Serialization.PBEntity internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.memstore.serialization.Serialization.PBEntity();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.memstore.serialization.Serialization.PBEntity.getDescriptor();
      }
      
      public com.memstore.serialization.Serialization.PBEntity getDefaultInstanceForType() {
        return com.memstore.serialization.Serialization.PBEntity.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.memstore.serialization.Serialization.PBEntity build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.memstore.serialization.Serialization.PBEntity buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.memstore.serialization.Serialization.PBEntity buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.poolIndexes_ != java.util.Collections.EMPTY_LIST) {
          result.poolIndexes_ =
            java.util.Collections.unmodifiableList(result.poolIndexes_);
        }
        if (result.notPooledValue_ != java.util.Collections.EMPTY_LIST) {
          result.notPooledValue_ =
            java.util.Collections.unmodifiableList(result.notPooledValue_);
        }
        com.memstore.serialization.Serialization.PBEntity returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.memstore.serialization.Serialization.PBEntity) {
          return mergeFrom((com.memstore.serialization.Serialization.PBEntity)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.memstore.serialization.Serialization.PBEntity other) {
        if (other == com.memstore.serialization.Serialization.PBEntity.getDefaultInstance()) return this;
        if (other.hasBitmap()) {
          setBitmap(other.getBitmap());
        }
        if (!other.poolIndexes_.isEmpty()) {
          if (result.poolIndexes_.isEmpty()) {
            result.poolIndexes_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.poolIndexes_.addAll(other.poolIndexes_);
        }
        if (other.hasNotPooledBitmap()) {
          setNotPooledBitmap(other.getNotPooledBitmap());
        }
        if (!other.notPooledValue_.isEmpty()) {
          if (result.notPooledValue_.isEmpty()) {
            result.notPooledValue_ = new java.util.ArrayList<com.memstore.serialization.Serialization.PBValue>();
          }
          result.notPooledValue_.addAll(other.notPooledValue_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setBitmap(input.readUInt32());
              break;
            }
            case 16: {
              addPoolIndexes(input.readUInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addPoolIndexes(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              setNotPooledBitmap(input.readUInt32());
              break;
            }
            case 34: {
              com.memstore.serialization.Serialization.PBValue.Builder subBuilder = com.memstore.serialization.Serialization.PBValue.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addNotPooledValue(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required uint32 bitmap = 1;
      public boolean hasBitmap() {
        return result.hasBitmap();
      }
      public int getBitmap() {
        return result.getBitmap();
      }
      public Builder setBitmap(int value) {
        result.hasBitmap = true;
        result.bitmap_ = value;
        return this;
      }
      public Builder clearBitmap() {
        result.hasBitmap = false;
        result.bitmap_ = 0;
        return this;
      }
      
      // repeated uint32 poolIndexes = 2;
      public java.util.List<java.lang.Integer> getPoolIndexesList() {
        return java.util.Collections.unmodifiableList(result.poolIndexes_);
      }
      public int getPoolIndexesCount() {
        return result.getPoolIndexesCount();
      }
      public int getPoolIndexes(int index) {
        return result.getPoolIndexes(index);
      }
      public Builder setPoolIndexes(int index, int value) {
        result.poolIndexes_.set(index, value);
        return this;
      }
      public Builder addPoolIndexes(int value) {
        if (result.poolIndexes_.isEmpty()) {
          result.poolIndexes_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.poolIndexes_.add(value);
        return this;
      }
      public Builder addAllPoolIndexes(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.poolIndexes_.isEmpty()) {
          result.poolIndexes_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.poolIndexes_);
        return this;
      }
      public Builder clearPoolIndexes() {
        result.poolIndexes_ = java.util.Collections.emptyList();
        return this;
      }
      
      // optional uint32 notPooledBitmap = 3;
      public boolean hasNotPooledBitmap() {
        return result.hasNotPooledBitmap();
      }
      public int getNotPooledBitmap() {
        return result.getNotPooledBitmap();
      }
      public Builder setNotPooledBitmap(int value) {
        result.hasNotPooledBitmap = true;
        result.notPooledBitmap_ = value;
        return this;
      }
      public Builder clearNotPooledBitmap() {
        result.hasNotPooledBitmap = false;
        result.notPooledBitmap_ = 0;
        return this;
      }
      
      // repeated .com.memstore.PBValue notPooledValue = 4;
      public java.util.List<com.memstore.serialization.Serialization.PBValue> getNotPooledValueList() {
        return java.util.Collections.unmodifiableList(result.notPooledValue_);
      }
      public int getNotPooledValueCount() {
        return result.getNotPooledValueCount();
      }
      public com.memstore.serialization.Serialization.PBValue getNotPooledValue(int index) {
        return result.getNotPooledValue(index);
      }
      public Builder setNotPooledValue(int index, com.memstore.serialization.Serialization.PBValue value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.notPooledValue_.set(index, value);
        return this;
      }
      public Builder setNotPooledValue(int index, com.memstore.serialization.Serialization.PBValue.Builder builderForValue) {
        result.notPooledValue_.set(index, builderForValue.build());
        return this;
      }
      public Builder addNotPooledValue(com.memstore.serialization.Serialization.PBValue value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.notPooledValue_.isEmpty()) {
          result.notPooledValue_ = new java.util.ArrayList<com.memstore.serialization.Serialization.PBValue>();
        }
        result.notPooledValue_.add(value);
        return this;
      }
      public Builder addNotPooledValue(com.memstore.serialization.Serialization.PBValue.Builder builderForValue) {
        if (result.notPooledValue_.isEmpty()) {
          result.notPooledValue_ = new java.util.ArrayList<com.memstore.serialization.Serialization.PBValue>();
        }
        result.notPooledValue_.add(builderForValue.build());
        return this;
      }
      public Builder addAllNotPooledValue(
          java.lang.Iterable<? extends com.memstore.serialization.Serialization.PBValue> values) {
        if (result.notPooledValue_.isEmpty()) {
          result.notPooledValue_ = new java.util.ArrayList<com.memstore.serialization.Serialization.PBValue>();
        }
        super.addAll(values, result.notPooledValue_);
        return this;
      }
      public Builder clearNotPooledValue() {
        result.notPooledValue_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.memstore.PBEntity)
    }
    
    static {
      defaultInstance = new PBEntity(true);
      com.memstore.serialization.Serialization.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.memstore.PBEntity)
  }
  
  public static final class PBEntityTimeline extends
      com.google.protobuf.GeneratedMessage {
    // Use PBEntityTimeline.newBuilder() to construct.
    private PBEntityTimeline() {
      initFields();
    }
    private PBEntityTimeline(boolean noInit) {}
    
    private static final PBEntityTimeline defaultInstance;
    public static PBEntityTimeline getDefaultInstance() {
      return defaultInstance;
    }
    
    public PBEntityTimeline getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.memstore.serialization.Serialization.internal_static_com_memstore_PBEntityTimeline_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.memstore.serialization.Serialization.internal_static_com_memstore_PBEntityTimeline_fieldAccessorTable;
    }
    
    // repeated uint64 date = 1;
    public static final int DATE_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Long> date_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Long> getDateList() {
      return date_;
    }
    public int getDateCount() { return date_.size(); }
    public long getDate(int index) {
      return date_.get(index);
    }
    
    // repeated .com.memstore.PBEntityTimelineValue value = 2;
    public static final int VALUE_FIELD_NUMBER = 2;
    private java.util.List<com.memstore.serialization.Serialization.PBEntityTimelineValue> value_ =
      java.util.Collections.emptyList();
    public java.util.List<com.memstore.serialization.Serialization.PBEntityTimelineValue> getValueList() {
      return value_;
    }
    public int getValueCount() { return value_.size(); }
    public com.memstore.serialization.Serialization.PBEntityTimelineValue getValue(int index) {
      return value_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      for (com.memstore.serialization.Serialization.PBEntityTimelineValue element : getValueList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (long element : getDateList()) {
        output.writeUInt64(1, element);
      }
      for (com.memstore.serialization.Serialization.PBEntityTimelineValue element : getValueList()) {
        output.writeMessage(2, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      {
        int dataSize = 0;
        for (long element : getDateList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getDateList().size();
      }
      for (com.memstore.serialization.Serialization.PBEntityTimelineValue element : getValueList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.memstore.serialization.Serialization.PBEntityTimeline parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBEntityTimeline parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBEntityTimeline parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBEntityTimeline parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBEntityTimeline parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBEntityTimeline parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBEntityTimeline parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.memstore.serialization.Serialization.PBEntityTimeline parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.memstore.serialization.Serialization.PBEntityTimeline parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBEntityTimeline parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.memstore.serialization.Serialization.PBEntityTimeline prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.memstore.serialization.Serialization.PBEntityTimeline result;
      
      // Construct using com.memstore.serialization.Serialization.PBEntityTimeline.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.memstore.serialization.Serialization.PBEntityTimeline();
        return builder;
      }
      
      protected com.memstore.serialization.Serialization.PBEntityTimeline internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.memstore.serialization.Serialization.PBEntityTimeline();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.memstore.serialization.Serialization.PBEntityTimeline.getDescriptor();
      }
      
      public com.memstore.serialization.Serialization.PBEntityTimeline getDefaultInstanceForType() {
        return com.memstore.serialization.Serialization.PBEntityTimeline.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.memstore.serialization.Serialization.PBEntityTimeline build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.memstore.serialization.Serialization.PBEntityTimeline buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.memstore.serialization.Serialization.PBEntityTimeline buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.date_ != java.util.Collections.EMPTY_LIST) {
          result.date_ =
            java.util.Collections.unmodifiableList(result.date_);
        }
        if (result.value_ != java.util.Collections.EMPTY_LIST) {
          result.value_ =
            java.util.Collections.unmodifiableList(result.value_);
        }
        com.memstore.serialization.Serialization.PBEntityTimeline returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.memstore.serialization.Serialization.PBEntityTimeline) {
          return mergeFrom((com.memstore.serialization.Serialization.PBEntityTimeline)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.memstore.serialization.Serialization.PBEntityTimeline other) {
        if (other == com.memstore.serialization.Serialization.PBEntityTimeline.getDefaultInstance()) return this;
        if (!other.date_.isEmpty()) {
          if (result.date_.isEmpty()) {
            result.date_ = new java.util.ArrayList<java.lang.Long>();
          }
          result.date_.addAll(other.date_);
        }
        if (!other.value_.isEmpty()) {
          if (result.value_.isEmpty()) {
            result.value_ = new java.util.ArrayList<com.memstore.serialization.Serialization.PBEntityTimelineValue>();
          }
          result.value_.addAll(other.value_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              addDate(input.readUInt64());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addDate(input.readUInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 18: {
              com.memstore.serialization.Serialization.PBEntityTimelineValue.Builder subBuilder = com.memstore.serialization.Serialization.PBEntityTimelineValue.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addValue(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // repeated uint64 date = 1;
      public java.util.List<java.lang.Long> getDateList() {
        return java.util.Collections.unmodifiableList(result.date_);
      }
      public int getDateCount() {
        return result.getDateCount();
      }
      public long getDate(int index) {
        return result.getDate(index);
      }
      public Builder setDate(int index, long value) {
        result.date_.set(index, value);
        return this;
      }
      public Builder addDate(long value) {
        if (result.date_.isEmpty()) {
          result.date_ = new java.util.ArrayList<java.lang.Long>();
        }
        result.date_.add(value);
        return this;
      }
      public Builder addAllDate(
          java.lang.Iterable<? extends java.lang.Long> values) {
        if (result.date_.isEmpty()) {
          result.date_ = new java.util.ArrayList<java.lang.Long>();
        }
        super.addAll(values, result.date_);
        return this;
      }
      public Builder clearDate() {
        result.date_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated .com.memstore.PBEntityTimelineValue value = 2;
      public java.util.List<com.memstore.serialization.Serialization.PBEntityTimelineValue> getValueList() {
        return java.util.Collections.unmodifiableList(result.value_);
      }
      public int getValueCount() {
        return result.getValueCount();
      }
      public com.memstore.serialization.Serialization.PBEntityTimelineValue getValue(int index) {
        return result.getValue(index);
      }
      public Builder setValue(int index, com.memstore.serialization.Serialization.PBEntityTimelineValue value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.value_.set(index, value);
        return this;
      }
      public Builder setValue(int index, com.memstore.serialization.Serialization.PBEntityTimelineValue.Builder builderForValue) {
        result.value_.set(index, builderForValue.build());
        return this;
      }
      public Builder addValue(com.memstore.serialization.Serialization.PBEntityTimelineValue value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.value_.isEmpty()) {
          result.value_ = new java.util.ArrayList<com.memstore.serialization.Serialization.PBEntityTimelineValue>();
        }
        result.value_.add(value);
        return this;
      }
      public Builder addValue(com.memstore.serialization.Serialization.PBEntityTimelineValue.Builder builderForValue) {
        if (result.value_.isEmpty()) {
          result.value_ = new java.util.ArrayList<com.memstore.serialization.Serialization.PBEntityTimelineValue>();
        }
        result.value_.add(builderForValue.build());
        return this;
      }
      public Builder addAllValue(
          java.lang.Iterable<? extends com.memstore.serialization.Serialization.PBEntityTimelineValue> values) {
        if (result.value_.isEmpty()) {
          result.value_ = new java.util.ArrayList<com.memstore.serialization.Serialization.PBEntityTimelineValue>();
        }
        super.addAll(values, result.value_);
        return this;
      }
      public Builder clearValue() {
        result.value_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.memstore.PBEntityTimeline)
    }
    
    static {
      defaultInstance = new PBEntityTimeline(true);
      com.memstore.serialization.Serialization.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.memstore.PBEntityTimeline)
  }
  
  public static final class PBEntityTimelineValue extends
      com.google.protobuf.GeneratedMessage {
    // Use PBEntityTimelineValue.newBuilder() to construct.
    private PBEntityTimelineValue() {
      initFields();
    }
    private PBEntityTimelineValue(boolean noInit) {}
    
    private static final PBEntityTimelineValue defaultInstance;
    public static PBEntityTimelineValue getDefaultInstance() {
      return defaultInstance;
    }
    
    public PBEntityTimelineValue getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.memstore.serialization.Serialization.internal_static_com_memstore_PBEntityTimelineValue_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.memstore.serialization.Serialization.internal_static_com_memstore_PBEntityTimelineValue_fieldAccessorTable;
    }
    
    // optional .com.memstore.Tombstone tombstone = 1;
    public static final int TOMBSTONE_FIELD_NUMBER = 1;
    private boolean hasTombstone;
    private com.memstore.serialization.Serialization.Tombstone tombstone_;
    public boolean hasTombstone() { return hasTombstone; }
    public com.memstore.serialization.Serialization.Tombstone getTombstone() { return tombstone_; }
    
    // optional .com.memstore.PBEntity entity = 2;
    public static final int ENTITY_FIELD_NUMBER = 2;
    private boolean hasEntity;
    private com.memstore.serialization.Serialization.PBEntity entity_;
    public boolean hasEntity() { return hasEntity; }
    public com.memstore.serialization.Serialization.PBEntity getEntity() { return entity_; }
    
    private void initFields() {
      tombstone_ = com.memstore.serialization.Serialization.Tombstone.getDefaultInstance();
      entity_ = com.memstore.serialization.Serialization.PBEntity.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (hasEntity()) {
        if (!getEntity().isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasTombstone()) {
        output.writeMessage(1, getTombstone());
      }
      if (hasEntity()) {
        output.writeMessage(2, getEntity());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasTombstone()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getTombstone());
      }
      if (hasEntity()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getEntity());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.memstore.serialization.Serialization.PBEntityTimelineValue parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBEntityTimelineValue parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBEntityTimelineValue parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBEntityTimelineValue parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBEntityTimelineValue parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBEntityTimelineValue parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBEntityTimelineValue parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.memstore.serialization.Serialization.PBEntityTimelineValue parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.memstore.serialization.Serialization.PBEntityTimelineValue parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBEntityTimelineValue parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.memstore.serialization.Serialization.PBEntityTimelineValue prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.memstore.serialization.Serialization.PBEntityTimelineValue result;
      
      // Construct using com.memstore.serialization.Serialization.PBEntityTimelineValue.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.memstore.serialization.Serialization.PBEntityTimelineValue();
        return builder;
      }
      
      protected com.memstore.serialization.Serialization.PBEntityTimelineValue internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.memstore.serialization.Serialization.PBEntityTimelineValue();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.memstore.serialization.Serialization.PBEntityTimelineValue.getDescriptor();
      }
      
      public com.memstore.serialization.Serialization.PBEntityTimelineValue getDefaultInstanceForType() {
        return com.memstore.serialization.Serialization.PBEntityTimelineValue.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.memstore.serialization.Serialization.PBEntityTimelineValue build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.memstore.serialization.Serialization.PBEntityTimelineValue buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.memstore.serialization.Serialization.PBEntityTimelineValue buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.memstore.serialization.Serialization.PBEntityTimelineValue returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.memstore.serialization.Serialization.PBEntityTimelineValue) {
          return mergeFrom((com.memstore.serialization.Serialization.PBEntityTimelineValue)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.memstore.serialization.Serialization.PBEntityTimelineValue other) {
        if (other == com.memstore.serialization.Serialization.PBEntityTimelineValue.getDefaultInstance()) return this;
        if (other.hasTombstone()) {
          mergeTombstone(other.getTombstone());
        }
        if (other.hasEntity()) {
          mergeEntity(other.getEntity());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              com.memstore.serialization.Serialization.Tombstone.Builder subBuilder = com.memstore.serialization.Serialization.Tombstone.newBuilder();
              if (hasTombstone()) {
                subBuilder.mergeFrom(getTombstone());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setTombstone(subBuilder.buildPartial());
              break;
            }
            case 18: {
              com.memstore.serialization.Serialization.PBEntity.Builder subBuilder = com.memstore.serialization.Serialization.PBEntity.newBuilder();
              if (hasEntity()) {
                subBuilder.mergeFrom(getEntity());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setEntity(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // optional .com.memstore.Tombstone tombstone = 1;
      public boolean hasTombstone() {
        return result.hasTombstone();
      }
      public com.memstore.serialization.Serialization.Tombstone getTombstone() {
        return result.getTombstone();
      }
      public Builder setTombstone(com.memstore.serialization.Serialization.Tombstone value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasTombstone = true;
        result.tombstone_ = value;
        return this;
      }
      public Builder setTombstone(com.memstore.serialization.Serialization.Tombstone.Builder builderForValue) {
        result.hasTombstone = true;
        result.tombstone_ = builderForValue.build();
        return this;
      }
      public Builder mergeTombstone(com.memstore.serialization.Serialization.Tombstone value) {
        if (result.hasTombstone() &&
            result.tombstone_ != com.memstore.serialization.Serialization.Tombstone.getDefaultInstance()) {
          result.tombstone_ =
            com.memstore.serialization.Serialization.Tombstone.newBuilder(result.tombstone_).mergeFrom(value).buildPartial();
        } else {
          result.tombstone_ = value;
        }
        result.hasTombstone = true;
        return this;
      }
      public Builder clearTombstone() {
        result.hasTombstone = false;
        result.tombstone_ = com.memstore.serialization.Serialization.Tombstone.getDefaultInstance();
        return this;
      }
      
      // optional .com.memstore.PBEntity entity = 2;
      public boolean hasEntity() {
        return result.hasEntity();
      }
      public com.memstore.serialization.Serialization.PBEntity getEntity() {
        return result.getEntity();
      }
      public Builder setEntity(com.memstore.serialization.Serialization.PBEntity value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasEntity = true;
        result.entity_ = value;
        return this;
      }
      public Builder setEntity(com.memstore.serialization.Serialization.PBEntity.Builder builderForValue) {
        result.hasEntity = true;
        result.entity_ = builderForValue.build();
        return this;
      }
      public Builder mergeEntity(com.memstore.serialization.Serialization.PBEntity value) {
        if (result.hasEntity() &&
            result.entity_ != com.memstore.serialization.Serialization.PBEntity.getDefaultInstance()) {
          result.entity_ =
            com.memstore.serialization.Serialization.PBEntity.newBuilder(result.entity_).mergeFrom(value).buildPartial();
        } else {
          result.entity_ = value;
        }
        result.hasEntity = true;
        return this;
      }
      public Builder clearEntity() {
        result.hasEntity = false;
        result.entity_ = com.memstore.serialization.Serialization.PBEntity.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.memstore.PBEntityTimelineValue)
    }
    
    static {
      defaultInstance = new PBEntityTimelineValue(true);
      com.memstore.serialization.Serialization.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.memstore.PBEntityTimelineValue)
  }
  
  public static final class Tombstone extends
      com.google.protobuf.GeneratedMessage {
    // Use Tombstone.newBuilder() to construct.
    private Tombstone() {
      initFields();
    }
    private Tombstone(boolean noInit) {}
    
    private static final Tombstone defaultInstance;
    public static Tombstone getDefaultInstance() {
      return defaultInstance;
    }
    
    public Tombstone getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.memstore.serialization.Serialization.internal_static_com_memstore_Tombstone_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.memstore.serialization.Serialization.internal_static_com_memstore_Tombstone_fieldAccessorTable;
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.memstore.serialization.Serialization.Tombstone parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.memstore.serialization.Serialization.Tombstone parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.memstore.serialization.Serialization.Tombstone parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.memstore.serialization.Serialization.Tombstone parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.memstore.serialization.Serialization.Tombstone parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.memstore.serialization.Serialization.Tombstone parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.memstore.serialization.Serialization.Tombstone parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.memstore.serialization.Serialization.Tombstone parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.memstore.serialization.Serialization.Tombstone parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.memstore.serialization.Serialization.Tombstone parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.memstore.serialization.Serialization.Tombstone prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.memstore.serialization.Serialization.Tombstone result;
      
      // Construct using com.memstore.serialization.Serialization.Tombstone.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.memstore.serialization.Serialization.Tombstone();
        return builder;
      }
      
      protected com.memstore.serialization.Serialization.Tombstone internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.memstore.serialization.Serialization.Tombstone();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.memstore.serialization.Serialization.Tombstone.getDescriptor();
      }
      
      public com.memstore.serialization.Serialization.Tombstone getDefaultInstanceForType() {
        return com.memstore.serialization.Serialization.Tombstone.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.memstore.serialization.Serialization.Tombstone build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.memstore.serialization.Serialization.Tombstone buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.memstore.serialization.Serialization.Tombstone buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.memstore.serialization.Serialization.Tombstone returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.memstore.serialization.Serialization.Tombstone) {
          return mergeFrom((com.memstore.serialization.Serialization.Tombstone)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.memstore.serialization.Serialization.Tombstone other) {
        if (other == com.memstore.serialization.Serialization.Tombstone.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:com.memstore.Tombstone)
    }
    
    static {
      defaultInstance = new Tombstone(true);
      com.memstore.serialization.Serialization.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.memstore.Tombstone)
  }
  
  public static final class PBValue extends
      com.google.protobuf.GeneratedMessage {
    // Use PBValue.newBuilder() to construct.
    private PBValue() {
      initFields();
    }
    private PBValue(boolean noInit) {}
    
    private static final PBValue defaultInstance;
    public static PBValue getDefaultInstance() {
      return defaultInstance;
    }
    
    public PBValue getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.memstore.serialization.Serialization.internal_static_com_memstore_PBValue_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.memstore.serialization.Serialization.internal_static_com_memstore_PBValue_fieldAccessorTable;
    }
    
    // optional string string = 1;
    public static final int STRING_FIELD_NUMBER = 1;
    private boolean hasString;
    private java.lang.String string_ = "";
    public boolean hasString() { return hasString; }
    public java.lang.String getString() { return string_; }
    
    // optional int32 int = 2;
    public static final int INT_FIELD_NUMBER = 2;
    private boolean hasInt;
    private int int_ = 0;
    public boolean hasInt() { return hasInt; }
    public int getInt() { return int_; }
    
    // optional int64 long = 3;
    public static final int LONG_FIELD_NUMBER = 3;
    private boolean hasLong;
    private long long_ = 0L;
    public boolean hasLong() { return hasLong; }
    public long getLong() { return long_; }
    
    // optional .com.memstore.Tombstone tombstone = 4;
    public static final int TOMBSTONE_FIELD_NUMBER = 4;
    private boolean hasTombstone;
    private com.memstore.serialization.Serialization.Tombstone tombstone_;
    public boolean hasTombstone() { return hasTombstone; }
    public com.memstore.serialization.Serialization.Tombstone getTombstone() { return tombstone_; }
    
    // optional bool boolean = 5;
    public static final int BOOLEAN_FIELD_NUMBER = 5;
    private boolean hasBoolean;
    private boolean boolean_ = false;
    public boolean hasBoolean() { return hasBoolean; }
    public boolean getBoolean() { return boolean_; }
    
    // optional double double = 6;
    public static final int DOUBLE_FIELD_NUMBER = 6;
    private boolean hasDouble;
    private double double_ = 0D;
    public boolean hasDouble() { return hasDouble; }
    public double getDouble() { return double_; }
    
    // optional bytes bytes = 7;
    public static final int BYTES_FIELD_NUMBER = 7;
    private boolean hasBytes;
    private com.google.protobuf.ByteString bytes_ = com.google.protobuf.ByteString.EMPTY;
    public boolean hasBytes() { return hasBytes; }
    public com.google.protobuf.ByteString getBytes() { return bytes_; }
    
    // optional float float = 8;
    public static final int FLOAT_FIELD_NUMBER = 8;
    private boolean hasFloat;
    private float float_ = 0F;
    public boolean hasFloat() { return hasFloat; }
    public float getFloat() { return float_; }
    
    // optional int64 date = 9;
    public static final int DATE_FIELD_NUMBER = 9;
    private boolean hasDate;
    private long date_ = 0L;
    public boolean hasDate() { return hasDate; }
    public long getDate() { return date_; }
    
    private void initFields() {
      tombstone_ = com.memstore.serialization.Serialization.Tombstone.getDefaultInstance();
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasString()) {
        output.writeString(1, getString());
      }
      if (hasInt()) {
        output.writeInt32(2, getInt());
      }
      if (hasLong()) {
        output.writeInt64(3, getLong());
      }
      if (hasTombstone()) {
        output.writeMessage(4, getTombstone());
      }
      if (hasBoolean()) {
        output.writeBool(5, getBoolean());
      }
      if (hasDouble()) {
        output.writeDouble(6, getDouble());
      }
      if (hasBytes()) {
        output.writeBytes(7, getBytes());
      }
      if (hasFloat()) {
        output.writeFloat(8, getFloat());
      }
      if (hasDate()) {
        output.writeInt64(9, getDate());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasString()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getString());
      }
      if (hasInt()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getInt());
      }
      if (hasLong()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, getLong());
      }
      if (hasTombstone()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getTombstone());
      }
      if (hasBoolean()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, getBoolean());
      }
      if (hasDouble()) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, getDouble());
      }
      if (hasBytes()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(7, getBytes());
      }
      if (hasFloat()) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, getFloat());
      }
      if (hasDate()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(9, getDate());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.memstore.serialization.Serialization.PBValue parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBValue parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBValue parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBValue parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBValue parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBValue parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBValue parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.memstore.serialization.Serialization.PBValue parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.memstore.serialization.Serialization.PBValue parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBValue parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.memstore.serialization.Serialization.PBValue prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.memstore.serialization.Serialization.PBValue result;
      
      // Construct using com.memstore.serialization.Serialization.PBValue.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.memstore.serialization.Serialization.PBValue();
        return builder;
      }
      
      protected com.memstore.serialization.Serialization.PBValue internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.memstore.serialization.Serialization.PBValue();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.memstore.serialization.Serialization.PBValue.getDescriptor();
      }
      
      public com.memstore.serialization.Serialization.PBValue getDefaultInstanceForType() {
        return com.memstore.serialization.Serialization.PBValue.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.memstore.serialization.Serialization.PBValue build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.memstore.serialization.Serialization.PBValue buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.memstore.serialization.Serialization.PBValue buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.memstore.serialization.Serialization.PBValue returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.memstore.serialization.Serialization.PBValue) {
          return mergeFrom((com.memstore.serialization.Serialization.PBValue)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.memstore.serialization.Serialization.PBValue other) {
        if (other == com.memstore.serialization.Serialization.PBValue.getDefaultInstance()) return this;
        if (other.hasString()) {
          setString(other.getString());
        }
        if (other.hasInt()) {
          setInt(other.getInt());
        }
        if (other.hasLong()) {
          setLong(other.getLong());
        }
        if (other.hasTombstone()) {
          mergeTombstone(other.getTombstone());
        }
        if (other.hasBoolean()) {
          setBoolean(other.getBoolean());
        }
        if (other.hasDouble()) {
          setDouble(other.getDouble());
        }
        if (other.hasBytes()) {
          setBytes(other.getBytes());
        }
        if (other.hasFloat()) {
          setFloat(other.getFloat());
        }
        if (other.hasDate()) {
          setDate(other.getDate());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setString(input.readString());
              break;
            }
            case 16: {
              setInt(input.readInt32());
              break;
            }
            case 24: {
              setLong(input.readInt64());
              break;
            }
            case 34: {
              com.memstore.serialization.Serialization.Tombstone.Builder subBuilder = com.memstore.serialization.Serialization.Tombstone.newBuilder();
              if (hasTombstone()) {
                subBuilder.mergeFrom(getTombstone());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setTombstone(subBuilder.buildPartial());
              break;
            }
            case 40: {
              setBoolean(input.readBool());
              break;
            }
            case 49: {
              setDouble(input.readDouble());
              break;
            }
            case 58: {
              setBytes(input.readBytes());
              break;
            }
            case 69: {
              setFloat(input.readFloat());
              break;
            }
            case 72: {
              setDate(input.readInt64());
              break;
            }
          }
        }
      }
      
      
      // optional string string = 1;
      public boolean hasString() {
        return result.hasString();
      }
      public java.lang.String getString() {
        return result.getString();
      }
      public Builder setString(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasString = true;
        result.string_ = value;
        return this;
      }
      public Builder clearString() {
        result.hasString = false;
        result.string_ = getDefaultInstance().getString();
        return this;
      }
      
      // optional int32 int = 2;
      public boolean hasInt() {
        return result.hasInt();
      }
      public int getInt() {
        return result.getInt();
      }
      public Builder setInt(int value) {
        result.hasInt = true;
        result.int_ = value;
        return this;
      }
      public Builder clearInt() {
        result.hasInt = false;
        result.int_ = 0;
        return this;
      }
      
      // optional int64 long = 3;
      public boolean hasLong() {
        return result.hasLong();
      }
      public long getLong() {
        return result.getLong();
      }
      public Builder setLong(long value) {
        result.hasLong = true;
        result.long_ = value;
        return this;
      }
      public Builder clearLong() {
        result.hasLong = false;
        result.long_ = 0L;
        return this;
      }
      
      // optional .com.memstore.Tombstone tombstone = 4;
      public boolean hasTombstone() {
        return result.hasTombstone();
      }
      public com.memstore.serialization.Serialization.Tombstone getTombstone() {
        return result.getTombstone();
      }
      public Builder setTombstone(com.memstore.serialization.Serialization.Tombstone value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasTombstone = true;
        result.tombstone_ = value;
        return this;
      }
      public Builder setTombstone(com.memstore.serialization.Serialization.Tombstone.Builder builderForValue) {
        result.hasTombstone = true;
        result.tombstone_ = builderForValue.build();
        return this;
      }
      public Builder mergeTombstone(com.memstore.serialization.Serialization.Tombstone value) {
        if (result.hasTombstone() &&
            result.tombstone_ != com.memstore.serialization.Serialization.Tombstone.getDefaultInstance()) {
          result.tombstone_ =
            com.memstore.serialization.Serialization.Tombstone.newBuilder(result.tombstone_).mergeFrom(value).buildPartial();
        } else {
          result.tombstone_ = value;
        }
        result.hasTombstone = true;
        return this;
      }
      public Builder clearTombstone() {
        result.hasTombstone = false;
        result.tombstone_ = com.memstore.serialization.Serialization.Tombstone.getDefaultInstance();
        return this;
      }
      
      // optional bool boolean = 5;
      public boolean hasBoolean() {
        return result.hasBoolean();
      }
      public boolean getBoolean() {
        return result.getBoolean();
      }
      public Builder setBoolean(boolean value) {
        result.hasBoolean = true;
        result.boolean_ = value;
        return this;
      }
      public Builder clearBoolean() {
        result.hasBoolean = false;
        result.boolean_ = false;
        return this;
      }
      
      // optional double double = 6;
      public boolean hasDouble() {
        return result.hasDouble();
      }
      public double getDouble() {
        return result.getDouble();
      }
      public Builder setDouble(double value) {
        result.hasDouble = true;
        result.double_ = value;
        return this;
      }
      public Builder clearDouble() {
        result.hasDouble = false;
        result.double_ = 0D;
        return this;
      }
      
      // optional bytes bytes = 7;
      public boolean hasBytes() {
        return result.hasBytes();
      }
      public com.google.protobuf.ByteString getBytes() {
        return result.getBytes();
      }
      public Builder setBytes(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasBytes = true;
        result.bytes_ = value;
        return this;
      }
      public Builder clearBytes() {
        result.hasBytes = false;
        result.bytes_ = getDefaultInstance().getBytes();
        return this;
      }
      
      // optional float float = 8;
      public boolean hasFloat() {
        return result.hasFloat();
      }
      public float getFloat() {
        return result.getFloat();
      }
      public Builder setFloat(float value) {
        result.hasFloat = true;
        result.float_ = value;
        return this;
      }
      public Builder clearFloat() {
        result.hasFloat = false;
        result.float_ = 0F;
        return this;
      }
      
      // optional int64 date = 9;
      public boolean hasDate() {
        return result.hasDate();
      }
      public long getDate() {
        return result.getDate();
      }
      public Builder setDate(long value) {
        result.hasDate = true;
        result.date_ = value;
        return this;
      }
      public Builder clearDate() {
        result.hasDate = false;
        result.date_ = 0L;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.memstore.PBValue)
    }
    
    static {
      defaultInstance = new PBValue(true);
      com.memstore.serialization.Serialization.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.memstore.PBValue)
  }
  
  public static final class Keys extends
      com.google.protobuf.GeneratedMessage {
    // Use Keys.newBuilder() to construct.
    private Keys() {
      initFields();
    }
    private Keys(boolean noInit) {}
    
    private static final Keys defaultInstance;
    public static Keys getDefaultInstance() {
      return defaultInstance;
    }
    
    public Keys getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.memstore.serialization.Serialization.internal_static_com_memstore_Keys_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.memstore.serialization.Serialization.internal_static_com_memstore_Keys_fieldAccessorTable;
    }
    
    // repeated .com.memstore.Key key = 1;
    public static final int KEY_FIELD_NUMBER = 1;
    private java.util.List<com.memstore.serialization.Serialization.Key> key_ =
      java.util.Collections.emptyList();
    public java.util.List<com.memstore.serialization.Serialization.Key> getKeyList() {
      return key_;
    }
    public int getKeyCount() { return key_.size(); }
    public com.memstore.serialization.Serialization.Key getKey(int index) {
      return key_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      for (com.memstore.serialization.Serialization.Key element : getKeyList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (com.memstore.serialization.Serialization.Key element : getKeyList()) {
        output.writeMessage(1, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (com.memstore.serialization.Serialization.Key element : getKeyList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.memstore.serialization.Serialization.Keys parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.memstore.serialization.Serialization.Keys parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.memstore.serialization.Serialization.Keys parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.memstore.serialization.Serialization.Keys parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.memstore.serialization.Serialization.Keys parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.memstore.serialization.Serialization.Keys parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.memstore.serialization.Serialization.Keys parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.memstore.serialization.Serialization.Keys parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.memstore.serialization.Serialization.Keys parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.memstore.serialization.Serialization.Keys parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.memstore.serialization.Serialization.Keys prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.memstore.serialization.Serialization.Keys result;
      
      // Construct using com.memstore.serialization.Serialization.Keys.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.memstore.serialization.Serialization.Keys();
        return builder;
      }
      
      protected com.memstore.serialization.Serialization.Keys internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.memstore.serialization.Serialization.Keys();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.memstore.serialization.Serialization.Keys.getDescriptor();
      }
      
      public com.memstore.serialization.Serialization.Keys getDefaultInstanceForType() {
        return com.memstore.serialization.Serialization.Keys.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.memstore.serialization.Serialization.Keys build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.memstore.serialization.Serialization.Keys buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.memstore.serialization.Serialization.Keys buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.key_ != java.util.Collections.EMPTY_LIST) {
          result.key_ =
            java.util.Collections.unmodifiableList(result.key_);
        }
        com.memstore.serialization.Serialization.Keys returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.memstore.serialization.Serialization.Keys) {
          return mergeFrom((com.memstore.serialization.Serialization.Keys)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.memstore.serialization.Serialization.Keys other) {
        if (other == com.memstore.serialization.Serialization.Keys.getDefaultInstance()) return this;
        if (!other.key_.isEmpty()) {
          if (result.key_.isEmpty()) {
            result.key_ = new java.util.ArrayList<com.memstore.serialization.Serialization.Key>();
          }
          result.key_.addAll(other.key_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              com.memstore.serialization.Serialization.Key.Builder subBuilder = com.memstore.serialization.Serialization.Key.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addKey(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // repeated .com.memstore.Key key = 1;
      public java.util.List<com.memstore.serialization.Serialization.Key> getKeyList() {
        return java.util.Collections.unmodifiableList(result.key_);
      }
      public int getKeyCount() {
        return result.getKeyCount();
      }
      public com.memstore.serialization.Serialization.Key getKey(int index) {
        return result.getKey(index);
      }
      public Builder setKey(int index, com.memstore.serialization.Serialization.Key value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.key_.set(index, value);
        return this;
      }
      public Builder setKey(int index, com.memstore.serialization.Serialization.Key.Builder builderForValue) {
        result.key_.set(index, builderForValue.build());
        return this;
      }
      public Builder addKey(com.memstore.serialization.Serialization.Key value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.key_.isEmpty()) {
          result.key_ = new java.util.ArrayList<com.memstore.serialization.Serialization.Key>();
        }
        result.key_.add(value);
        return this;
      }
      public Builder addKey(com.memstore.serialization.Serialization.Key.Builder builderForValue) {
        if (result.key_.isEmpty()) {
          result.key_ = new java.util.ArrayList<com.memstore.serialization.Serialization.Key>();
        }
        result.key_.add(builderForValue.build());
        return this;
      }
      public Builder addAllKey(
          java.lang.Iterable<? extends com.memstore.serialization.Serialization.Key> values) {
        if (result.key_.isEmpty()) {
          result.key_ = new java.util.ArrayList<com.memstore.serialization.Serialization.Key>();
        }
        super.addAll(values, result.key_);
        return this;
      }
      public Builder clearKey() {
        result.key_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.memstore.Keys)
    }
    
    static {
      defaultInstance = new Keys(true);
      com.memstore.serialization.Serialization.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.memstore.Keys)
  }
  
  public static final class Key extends
      com.google.protobuf.GeneratedMessage {
    // Use Key.newBuilder() to construct.
    private Key() {
      initFields();
    }
    private Key(boolean noInit) {}
    
    private static final Key defaultInstance;
    public static Key getDefaultInstance() {
      return defaultInstance;
    }
    
    public Key getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.memstore.serialization.Serialization.internal_static_com_memstore_Key_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.memstore.serialization.Serialization.internal_static_com_memstore_Key_fieldAccessorTable;
    }
    
    // required .com.memstore.PBValue key = 1;
    public static final int KEY_FIELD_NUMBER = 1;
    private boolean hasKey;
    private com.memstore.serialization.Serialization.PBValue key_;
    public boolean hasKey() { return hasKey; }
    public com.memstore.serialization.Serialization.PBValue getKey() { return key_; }
    
    // required uint32 index = 2;
    public static final int INDEX_FIELD_NUMBER = 2;
    private boolean hasIndex;
    private int index_ = 0;
    public boolean hasIndex() { return hasIndex; }
    public int getIndex() { return index_; }
    
    // required uint32 length = 3;
    public static final int LENGTH_FIELD_NUMBER = 3;
    private boolean hasLength;
    private int length_ = 0;
    public boolean hasLength() { return hasLength; }
    public int getLength() { return length_; }
    
    private void initFields() {
      key_ = com.memstore.serialization.Serialization.PBValue.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasKey) return false;
      if (!hasIndex) return false;
      if (!hasLength) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasKey()) {
        output.writeMessage(1, getKey());
      }
      if (hasIndex()) {
        output.writeUInt32(2, getIndex());
      }
      if (hasLength()) {
        output.writeUInt32(3, getLength());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasKey()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getKey());
      }
      if (hasIndex()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, getIndex());
      }
      if (hasLength()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, getLength());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.memstore.serialization.Serialization.Key parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.memstore.serialization.Serialization.Key parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.memstore.serialization.Serialization.Key parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.memstore.serialization.Serialization.Key parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.memstore.serialization.Serialization.Key parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.memstore.serialization.Serialization.Key parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.memstore.serialization.Serialization.Key parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.memstore.serialization.Serialization.Key parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.memstore.serialization.Serialization.Key parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.memstore.serialization.Serialization.Key parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.memstore.serialization.Serialization.Key prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.memstore.serialization.Serialization.Key result;
      
      // Construct using com.memstore.serialization.Serialization.Key.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.memstore.serialization.Serialization.Key();
        return builder;
      }
      
      protected com.memstore.serialization.Serialization.Key internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.memstore.serialization.Serialization.Key();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.memstore.serialization.Serialization.Key.getDescriptor();
      }
      
      public com.memstore.serialization.Serialization.Key getDefaultInstanceForType() {
        return com.memstore.serialization.Serialization.Key.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.memstore.serialization.Serialization.Key build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.memstore.serialization.Serialization.Key buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.memstore.serialization.Serialization.Key buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.memstore.serialization.Serialization.Key returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.memstore.serialization.Serialization.Key) {
          return mergeFrom((com.memstore.serialization.Serialization.Key)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.memstore.serialization.Serialization.Key other) {
        if (other == com.memstore.serialization.Serialization.Key.getDefaultInstance()) return this;
        if (other.hasKey()) {
          mergeKey(other.getKey());
        }
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        if (other.hasLength()) {
          setLength(other.getLength());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              com.memstore.serialization.Serialization.PBValue.Builder subBuilder = com.memstore.serialization.Serialization.PBValue.newBuilder();
              if (hasKey()) {
                subBuilder.mergeFrom(getKey());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setKey(subBuilder.buildPartial());
              break;
            }
            case 16: {
              setIndex(input.readUInt32());
              break;
            }
            case 24: {
              setLength(input.readUInt32());
              break;
            }
          }
        }
      }
      
      
      // required .com.memstore.PBValue key = 1;
      public boolean hasKey() {
        return result.hasKey();
      }
      public com.memstore.serialization.Serialization.PBValue getKey() {
        return result.getKey();
      }
      public Builder setKey(com.memstore.serialization.Serialization.PBValue value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasKey = true;
        result.key_ = value;
        return this;
      }
      public Builder setKey(com.memstore.serialization.Serialization.PBValue.Builder builderForValue) {
        result.hasKey = true;
        result.key_ = builderForValue.build();
        return this;
      }
      public Builder mergeKey(com.memstore.serialization.Serialization.PBValue value) {
        if (result.hasKey() &&
            result.key_ != com.memstore.serialization.Serialization.PBValue.getDefaultInstance()) {
          result.key_ =
            com.memstore.serialization.Serialization.PBValue.newBuilder(result.key_).mergeFrom(value).buildPartial();
        } else {
          result.key_ = value;
        }
        result.hasKey = true;
        return this;
      }
      public Builder clearKey() {
        result.hasKey = false;
        result.key_ = com.memstore.serialization.Serialization.PBValue.getDefaultInstance();
        return this;
      }
      
      // required uint32 index = 2;
      public boolean hasIndex() {
        return result.hasIndex();
      }
      public int getIndex() {
        return result.getIndex();
      }
      public Builder setIndex(int value) {
        result.hasIndex = true;
        result.index_ = value;
        return this;
      }
      public Builder clearIndex() {
        result.hasIndex = false;
        result.index_ = 0;
        return this;
      }
      
      // required uint32 length = 3;
      public boolean hasLength() {
        return result.hasLength();
      }
      public int getLength() {
        return result.getLength();
      }
      public Builder setLength(int value) {
        result.hasLength = true;
        result.length_ = value;
        return this;
      }
      public Builder clearLength() {
        result.hasLength = false;
        result.length_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.memstore.Key)
    }
    
    static {
      defaultInstance = new Key(true);
      com.memstore.serialization.Serialization.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.memstore.Key)
  }
  
  public static final class PBDateIndex extends
      com.google.protobuf.GeneratedMessage {
    // Use PBDateIndex.newBuilder() to construct.
    private PBDateIndex() {
      initFields();
    }
    private PBDateIndex(boolean noInit) {}
    
    private static final PBDateIndex defaultInstance;
    public static PBDateIndex getDefaultInstance() {
      return defaultInstance;
    }
    
    public PBDateIndex getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.memstore.serialization.Serialization.internal_static_com_memstore_PBDateIndex_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.memstore.serialization.Serialization.internal_static_com_memstore_PBDateIndex_fieldAccessorTable;
    }
    
    public static final class MarkList extends
        com.google.protobuf.GeneratedMessage {
      // Use MarkList.newBuilder() to construct.
      private MarkList() {
        initFields();
      }
      private MarkList(boolean noInit) {}
      
      private static final MarkList defaultInstance;
      public static MarkList getDefaultInstance() {
        return defaultInstance;
      }
      
      public MarkList getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.memstore.serialization.Serialization.internal_static_com_memstore_PBDateIndex_MarkList_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.memstore.serialization.Serialization.internal_static_com_memstore_PBDateIndex_MarkList_fieldAccessorTable;
      }
      
      // repeated uint64 dates = 1;
      public static final int DATES_FIELD_NUMBER = 1;
      private java.util.List<java.lang.Long> dates_ =
        java.util.Collections.emptyList();
      public java.util.List<java.lang.Long> getDatesList() {
        return dates_;
      }
      public int getDatesCount() { return dates_.size(); }
      public long getDates(int index) {
        return dates_.get(index);
      }
      
      // repeated uint64 tombstoneDates = 2;
      public static final int TOMBSTONEDATES_FIELD_NUMBER = 2;
      private java.util.List<java.lang.Long> tombstoneDates_ =
        java.util.Collections.emptyList();
      public java.util.List<java.lang.Long> getTombstoneDatesList() {
        return tombstoneDates_;
      }
      public int getTombstoneDatesCount() { return tombstoneDates_.size(); }
      public long getTombstoneDates(int index) {
        return tombstoneDates_.get(index);
      }
      
      private void initFields() {
      }
      public final boolean isInitialized() {
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        for (long element : getDatesList()) {
          output.writeUInt64(1, element);
        }
        for (long element : getTombstoneDatesList()) {
          output.writeUInt64(2, element);
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        {
          int dataSize = 0;
          for (long element : getDatesList()) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt64SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * getDatesList().size();
        }
        {
          int dataSize = 0;
          for (long element : getTombstoneDatesList()) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt64SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * getTombstoneDatesList().size();
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static com.memstore.serialization.Serialization.PBDateIndex.MarkList parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static com.memstore.serialization.Serialization.PBDateIndex.MarkList parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static com.memstore.serialization.Serialization.PBDateIndex.MarkList parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static com.memstore.serialization.Serialization.PBDateIndex.MarkList parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static com.memstore.serialization.Serialization.PBDateIndex.MarkList parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static com.memstore.serialization.Serialization.PBDateIndex.MarkList parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static com.memstore.serialization.Serialization.PBDateIndex.MarkList parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static com.memstore.serialization.Serialization.PBDateIndex.MarkList parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static com.memstore.serialization.Serialization.PBDateIndex.MarkList parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static com.memstore.serialization.Serialization.PBDateIndex.MarkList parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.memstore.serialization.Serialization.PBDateIndex.MarkList prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private com.memstore.serialization.Serialization.PBDateIndex.MarkList result;
        
        // Construct using com.memstore.serialization.Serialization.PBDateIndex.MarkList.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new com.memstore.serialization.Serialization.PBDateIndex.MarkList();
          return builder;
        }
        
        protected com.memstore.serialization.Serialization.PBDateIndex.MarkList internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new com.memstore.serialization.Serialization.PBDateIndex.MarkList();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.memstore.serialization.Serialization.PBDateIndex.MarkList.getDescriptor();
        }
        
        public com.memstore.serialization.Serialization.PBDateIndex.MarkList getDefaultInstanceForType() {
          return com.memstore.serialization.Serialization.PBDateIndex.MarkList.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public com.memstore.serialization.Serialization.PBDateIndex.MarkList build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private com.memstore.serialization.Serialization.PBDateIndex.MarkList buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public com.memstore.serialization.Serialization.PBDateIndex.MarkList buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          if (result.dates_ != java.util.Collections.EMPTY_LIST) {
            result.dates_ =
              java.util.Collections.unmodifiableList(result.dates_);
          }
          if (result.tombstoneDates_ != java.util.Collections.EMPTY_LIST) {
            result.tombstoneDates_ =
              java.util.Collections.unmodifiableList(result.tombstoneDates_);
          }
          com.memstore.serialization.Serialization.PBDateIndex.MarkList returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.memstore.serialization.Serialization.PBDateIndex.MarkList) {
            return mergeFrom((com.memstore.serialization.Serialization.PBDateIndex.MarkList)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(com.memstore.serialization.Serialization.PBDateIndex.MarkList other) {
          if (other == com.memstore.serialization.Serialization.PBDateIndex.MarkList.getDefaultInstance()) return this;
          if (!other.dates_.isEmpty()) {
            if (result.dates_.isEmpty()) {
              result.dates_ = new java.util.ArrayList<java.lang.Long>();
            }
            result.dates_.addAll(other.dates_);
          }
          if (!other.tombstoneDates_.isEmpty()) {
            if (result.tombstoneDates_.isEmpty()) {
              result.tombstoneDates_ = new java.util.ArrayList<java.lang.Long>();
            }
            result.tombstoneDates_.addAll(other.tombstoneDates_);
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 8: {
                addDates(input.readUInt64());
                break;
              }
              case 10: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                while (input.getBytesUntilLimit() > 0) {
                  addDates(input.readUInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 16: {
                addTombstoneDates(input.readUInt64());
                break;
              }
              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                while (input.getBytesUntilLimit() > 0) {
                  addTombstoneDates(input.readUInt64());
                }
                input.popLimit(limit);
                break;
              }
            }
          }
        }
        
        
        // repeated uint64 dates = 1;
        public java.util.List<java.lang.Long> getDatesList() {
          return java.util.Collections.unmodifiableList(result.dates_);
        }
        public int getDatesCount() {
          return result.getDatesCount();
        }
        public long getDates(int index) {
          return result.getDates(index);
        }
        public Builder setDates(int index, long value) {
          result.dates_.set(index, value);
          return this;
        }
        public Builder addDates(long value) {
          if (result.dates_.isEmpty()) {
            result.dates_ = new java.util.ArrayList<java.lang.Long>();
          }
          result.dates_.add(value);
          return this;
        }
        public Builder addAllDates(
            java.lang.Iterable<? extends java.lang.Long> values) {
          if (result.dates_.isEmpty()) {
            result.dates_ = new java.util.ArrayList<java.lang.Long>();
          }
          super.addAll(values, result.dates_);
          return this;
        }
        public Builder clearDates() {
          result.dates_ = java.util.Collections.emptyList();
          return this;
        }
        
        // repeated uint64 tombstoneDates = 2;
        public java.util.List<java.lang.Long> getTombstoneDatesList() {
          return java.util.Collections.unmodifiableList(result.tombstoneDates_);
        }
        public int getTombstoneDatesCount() {
          return result.getTombstoneDatesCount();
        }
        public long getTombstoneDates(int index) {
          return result.getTombstoneDates(index);
        }
        public Builder setTombstoneDates(int index, long value) {
          result.tombstoneDates_.set(index, value);
          return this;
        }
        public Builder addTombstoneDates(long value) {
          if (result.tombstoneDates_.isEmpty()) {
            result.tombstoneDates_ = new java.util.ArrayList<java.lang.Long>();
          }
          result.tombstoneDates_.add(value);
          return this;
        }
        public Builder addAllTombstoneDates(
            java.lang.Iterable<? extends java.lang.Long> values) {
          if (result.tombstoneDates_.isEmpty()) {
            result.tombstoneDates_ = new java.util.ArrayList<java.lang.Long>();
          }
          super.addAll(values, result.tombstoneDates_);
          return this;
        }
        public Builder clearTombstoneDates() {
          result.tombstoneDates_ = java.util.Collections.emptyList();
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:com.memstore.PBDateIndex.MarkList)
      }
      
      static {
        defaultInstance = new MarkList(true);
        com.memstore.serialization.Serialization.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:com.memstore.PBDateIndex.MarkList)
    }
    
    // repeated .com.memstore.PBValue key = 1;
    public static final int KEY_FIELD_NUMBER = 1;
    private java.util.List<com.memstore.serialization.Serialization.PBValue> key_ =
      java.util.Collections.emptyList();
    public java.util.List<com.memstore.serialization.Serialization.PBValue> getKeyList() {
      return key_;
    }
    public int getKeyCount() { return key_.size(); }
    public com.memstore.serialization.Serialization.PBValue getKey(int index) {
      return key_.get(index);
    }
    
    // repeated .com.memstore.PBDateIndex.MarkList list = 2;
    public static final int LIST_FIELD_NUMBER = 2;
    private java.util.List<com.memstore.serialization.Serialization.PBDateIndex.MarkList> list_ =
      java.util.Collections.emptyList();
    public java.util.List<com.memstore.serialization.Serialization.PBDateIndex.MarkList> getListList() {
      return list_;
    }
    public int getListCount() { return list_.size(); }
    public com.memstore.serialization.Serialization.PBDateIndex.MarkList getList(int index) {
      return list_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (com.memstore.serialization.Serialization.PBValue element : getKeyList()) {
        output.writeMessage(1, element);
      }
      for (com.memstore.serialization.Serialization.PBDateIndex.MarkList element : getListList()) {
        output.writeMessage(2, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (com.memstore.serialization.Serialization.PBValue element : getKeyList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      for (com.memstore.serialization.Serialization.PBDateIndex.MarkList element : getListList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.memstore.serialization.Serialization.PBDateIndex parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBDateIndex parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBDateIndex parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBDateIndex parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBDateIndex parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBDateIndex parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBDateIndex parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.memstore.serialization.Serialization.PBDateIndex parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.memstore.serialization.Serialization.PBDateIndex parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBDateIndex parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.memstore.serialization.Serialization.PBDateIndex prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.memstore.serialization.Serialization.PBDateIndex result;
      
      // Construct using com.memstore.serialization.Serialization.PBDateIndex.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.memstore.serialization.Serialization.PBDateIndex();
        return builder;
      }
      
      protected com.memstore.serialization.Serialization.PBDateIndex internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.memstore.serialization.Serialization.PBDateIndex();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.memstore.serialization.Serialization.PBDateIndex.getDescriptor();
      }
      
      public com.memstore.serialization.Serialization.PBDateIndex getDefaultInstanceForType() {
        return com.memstore.serialization.Serialization.PBDateIndex.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.memstore.serialization.Serialization.PBDateIndex build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.memstore.serialization.Serialization.PBDateIndex buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.memstore.serialization.Serialization.PBDateIndex buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.key_ != java.util.Collections.EMPTY_LIST) {
          result.key_ =
            java.util.Collections.unmodifiableList(result.key_);
        }
        if (result.list_ != java.util.Collections.EMPTY_LIST) {
          result.list_ =
            java.util.Collections.unmodifiableList(result.list_);
        }
        com.memstore.serialization.Serialization.PBDateIndex returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.memstore.serialization.Serialization.PBDateIndex) {
          return mergeFrom((com.memstore.serialization.Serialization.PBDateIndex)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.memstore.serialization.Serialization.PBDateIndex other) {
        if (other == com.memstore.serialization.Serialization.PBDateIndex.getDefaultInstance()) return this;
        if (!other.key_.isEmpty()) {
          if (result.key_.isEmpty()) {
            result.key_ = new java.util.ArrayList<com.memstore.serialization.Serialization.PBValue>();
          }
          result.key_.addAll(other.key_);
        }
        if (!other.list_.isEmpty()) {
          if (result.list_.isEmpty()) {
            result.list_ = new java.util.ArrayList<com.memstore.serialization.Serialization.PBDateIndex.MarkList>();
          }
          result.list_.addAll(other.list_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              com.memstore.serialization.Serialization.PBValue.Builder subBuilder = com.memstore.serialization.Serialization.PBValue.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addKey(subBuilder.buildPartial());
              break;
            }
            case 18: {
              com.memstore.serialization.Serialization.PBDateIndex.MarkList.Builder subBuilder = com.memstore.serialization.Serialization.PBDateIndex.MarkList.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addList(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // repeated .com.memstore.PBValue key = 1;
      public java.util.List<com.memstore.serialization.Serialization.PBValue> getKeyList() {
        return java.util.Collections.unmodifiableList(result.key_);
      }
      public int getKeyCount() {
        return result.getKeyCount();
      }
      public com.memstore.serialization.Serialization.PBValue getKey(int index) {
        return result.getKey(index);
      }
      public Builder setKey(int index, com.memstore.serialization.Serialization.PBValue value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.key_.set(index, value);
        return this;
      }
      public Builder setKey(int index, com.memstore.serialization.Serialization.PBValue.Builder builderForValue) {
        result.key_.set(index, builderForValue.build());
        return this;
      }
      public Builder addKey(com.memstore.serialization.Serialization.PBValue value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.key_.isEmpty()) {
          result.key_ = new java.util.ArrayList<com.memstore.serialization.Serialization.PBValue>();
        }
        result.key_.add(value);
        return this;
      }
      public Builder addKey(com.memstore.serialization.Serialization.PBValue.Builder builderForValue) {
        if (result.key_.isEmpty()) {
          result.key_ = new java.util.ArrayList<com.memstore.serialization.Serialization.PBValue>();
        }
        result.key_.add(builderForValue.build());
        return this;
      }
      public Builder addAllKey(
          java.lang.Iterable<? extends com.memstore.serialization.Serialization.PBValue> values) {
        if (result.key_.isEmpty()) {
          result.key_ = new java.util.ArrayList<com.memstore.serialization.Serialization.PBValue>();
        }
        super.addAll(values, result.key_);
        return this;
      }
      public Builder clearKey() {
        result.key_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated .com.memstore.PBDateIndex.MarkList list = 2;
      public java.util.List<com.memstore.serialization.Serialization.PBDateIndex.MarkList> getListList() {
        return java.util.Collections.unmodifiableList(result.list_);
      }
      public int getListCount() {
        return result.getListCount();
      }
      public com.memstore.serialization.Serialization.PBDateIndex.MarkList getList(int index) {
        return result.getList(index);
      }
      public Builder setList(int index, com.memstore.serialization.Serialization.PBDateIndex.MarkList value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.list_.set(index, value);
        return this;
      }
      public Builder setList(int index, com.memstore.serialization.Serialization.PBDateIndex.MarkList.Builder builderForValue) {
        result.list_.set(index, builderForValue.build());
        return this;
      }
      public Builder addList(com.memstore.serialization.Serialization.PBDateIndex.MarkList value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.list_.isEmpty()) {
          result.list_ = new java.util.ArrayList<com.memstore.serialization.Serialization.PBDateIndex.MarkList>();
        }
        result.list_.add(value);
        return this;
      }
      public Builder addList(com.memstore.serialization.Serialization.PBDateIndex.MarkList.Builder builderForValue) {
        if (result.list_.isEmpty()) {
          result.list_ = new java.util.ArrayList<com.memstore.serialization.Serialization.PBDateIndex.MarkList>();
        }
        result.list_.add(builderForValue.build());
        return this;
      }
      public Builder addAllList(
          java.lang.Iterable<? extends com.memstore.serialization.Serialization.PBDateIndex.MarkList> values) {
        if (result.list_.isEmpty()) {
          result.list_ = new java.util.ArrayList<com.memstore.serialization.Serialization.PBDateIndex.MarkList>();
        }
        super.addAll(values, result.list_);
        return this;
      }
      public Builder clearList() {
        result.list_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.memstore.PBDateIndex)
    }
    
    static {
      defaultInstance = new PBDateIndex(true);
      com.memstore.serialization.Serialization.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.memstore.PBDateIndex)
  }
  
  public static final class Header extends
      com.google.protobuf.GeneratedMessage {
    // Use Header.newBuilder() to construct.
    private Header() {
      initFields();
    }
    private Header(boolean noInit) {}
    
    private static final Header defaultInstance;
    public static Header getDefaultInstance() {
      return defaultInstance;
    }
    
    public Header getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.memstore.serialization.Serialization.internal_static_com_memstore_Header_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.memstore.serialization.Serialization.internal_static_com_memstore_Header_fieldAccessorTable;
    }
    
    // required uint32 size = 1;
    public static final int SIZE_FIELD_NUMBER = 1;
    private boolean hasSize;
    private int size_ = 0;
    public boolean hasSize() { return hasSize; }
    public int getSize() { return size_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasSize) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasSize()) {
        output.writeUInt32(1, getSize());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasSize()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, getSize());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.memstore.serialization.Serialization.Header parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.memstore.serialization.Serialization.Header parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.memstore.serialization.Serialization.Header parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.memstore.serialization.Serialization.Header parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.memstore.serialization.Serialization.Header parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.memstore.serialization.Serialization.Header parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.memstore.serialization.Serialization.Header parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.memstore.serialization.Serialization.Header parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.memstore.serialization.Serialization.Header parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.memstore.serialization.Serialization.Header parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.memstore.serialization.Serialization.Header prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.memstore.serialization.Serialization.Header result;
      
      // Construct using com.memstore.serialization.Serialization.Header.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.memstore.serialization.Serialization.Header();
        return builder;
      }
      
      protected com.memstore.serialization.Serialization.Header internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.memstore.serialization.Serialization.Header();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.memstore.serialization.Serialization.Header.getDescriptor();
      }
      
      public com.memstore.serialization.Serialization.Header getDefaultInstanceForType() {
        return com.memstore.serialization.Serialization.Header.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.memstore.serialization.Serialization.Header build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.memstore.serialization.Serialization.Header buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.memstore.serialization.Serialization.Header buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.memstore.serialization.Serialization.Header returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.memstore.serialization.Serialization.Header) {
          return mergeFrom((com.memstore.serialization.Serialization.Header)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.memstore.serialization.Serialization.Header other) {
        if (other == com.memstore.serialization.Serialization.Header.getDefaultInstance()) return this;
        if (other.hasSize()) {
          setSize(other.getSize());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setSize(input.readUInt32());
              break;
            }
          }
        }
      }
      
      
      // required uint32 size = 1;
      public boolean hasSize() {
        return result.hasSize();
      }
      public int getSize() {
        return result.getSize();
      }
      public Builder setSize(int value) {
        result.hasSize = true;
        result.size_ = value;
        return this;
      }
      public Builder clearSize() {
        result.hasSize = false;
        result.size_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.memstore.Header)
    }
    
    static {
      defaultInstance = new Header(true);
      com.memstore.serialization.Serialization.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.memstore.Header)
  }
  
  public static final class PBNodeKeys extends
      com.google.protobuf.GeneratedMessage {
    // Use PBNodeKeys.newBuilder() to construct.
    private PBNodeKeys() {
      initFields();
    }
    private PBNodeKeys(boolean noInit) {}
    
    private static final PBNodeKeys defaultInstance;
    public static PBNodeKeys getDefaultInstance() {
      return defaultInstance;
    }
    
    public PBNodeKeys getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.memstore.serialization.Serialization.internal_static_com_memstore_PBNodeKeys_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.memstore.serialization.Serialization.internal_static_com_memstore_PBNodeKeys_fieldAccessorTable;
    }
    
    // repeated .com.memstore.PBValue key = 1;
    public static final int KEY_FIELD_NUMBER = 1;
    private java.util.List<com.memstore.serialization.Serialization.PBValue> key_ =
      java.util.Collections.emptyList();
    public java.util.List<com.memstore.serialization.Serialization.PBValue> getKeyList() {
      return key_;
    }
    public int getKeyCount() { return key_.size(); }
    public com.memstore.serialization.Serialization.PBValue getKey(int index) {
      return key_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (com.memstore.serialization.Serialization.PBValue element : getKeyList()) {
        output.writeMessage(1, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (com.memstore.serialization.Serialization.PBValue element : getKeyList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.memstore.serialization.Serialization.PBNodeKeys parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBNodeKeys parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBNodeKeys parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBNodeKeys parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBNodeKeys parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBNodeKeys parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBNodeKeys parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.memstore.serialization.Serialization.PBNodeKeys parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.memstore.serialization.Serialization.PBNodeKeys parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.memstore.serialization.Serialization.PBNodeKeys parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.memstore.serialization.Serialization.PBNodeKeys prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.memstore.serialization.Serialization.PBNodeKeys result;
      
      // Construct using com.memstore.serialization.Serialization.PBNodeKeys.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.memstore.serialization.Serialization.PBNodeKeys();
        return builder;
      }
      
      protected com.memstore.serialization.Serialization.PBNodeKeys internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.memstore.serialization.Serialization.PBNodeKeys();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.memstore.serialization.Serialization.PBNodeKeys.getDescriptor();
      }
      
      public com.memstore.serialization.Serialization.PBNodeKeys getDefaultInstanceForType() {
        return com.memstore.serialization.Serialization.PBNodeKeys.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.memstore.serialization.Serialization.PBNodeKeys build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.memstore.serialization.Serialization.PBNodeKeys buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.memstore.serialization.Serialization.PBNodeKeys buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.key_ != java.util.Collections.EMPTY_LIST) {
          result.key_ =
            java.util.Collections.unmodifiableList(result.key_);
        }
        com.memstore.serialization.Serialization.PBNodeKeys returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.memstore.serialization.Serialization.PBNodeKeys) {
          return mergeFrom((com.memstore.serialization.Serialization.PBNodeKeys)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.memstore.serialization.Serialization.PBNodeKeys other) {
        if (other == com.memstore.serialization.Serialization.PBNodeKeys.getDefaultInstance()) return this;
        if (!other.key_.isEmpty()) {
          if (result.key_.isEmpty()) {
            result.key_ = new java.util.ArrayList<com.memstore.serialization.Serialization.PBValue>();
          }
          result.key_.addAll(other.key_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              com.memstore.serialization.Serialization.PBValue.Builder subBuilder = com.memstore.serialization.Serialization.PBValue.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addKey(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // repeated .com.memstore.PBValue key = 1;
      public java.util.List<com.memstore.serialization.Serialization.PBValue> getKeyList() {
        return java.util.Collections.unmodifiableList(result.key_);
      }
      public int getKeyCount() {
        return result.getKeyCount();
      }
      public com.memstore.serialization.Serialization.PBValue getKey(int index) {
        return result.getKey(index);
      }
      public Builder setKey(int index, com.memstore.serialization.Serialization.PBValue value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.key_.set(index, value);
        return this;
      }
      public Builder setKey(int index, com.memstore.serialization.Serialization.PBValue.Builder builderForValue) {
        result.key_.set(index, builderForValue.build());
        return this;
      }
      public Builder addKey(com.memstore.serialization.Serialization.PBValue value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.key_.isEmpty()) {
          result.key_ = new java.util.ArrayList<com.memstore.serialization.Serialization.PBValue>();
        }
        result.key_.add(value);
        return this;
      }
      public Builder addKey(com.memstore.serialization.Serialization.PBValue.Builder builderForValue) {
        if (result.key_.isEmpty()) {
          result.key_ = new java.util.ArrayList<com.memstore.serialization.Serialization.PBValue>();
        }
        result.key_.add(builderForValue.build());
        return this;
      }
      public Builder addAllKey(
          java.lang.Iterable<? extends com.memstore.serialization.Serialization.PBValue> values) {
        if (result.key_.isEmpty()) {
          result.key_ = new java.util.ArrayList<com.memstore.serialization.Serialization.PBValue>();
        }
        super.addAll(values, result.key_);
        return this;
      }
      public Builder clearKey() {
        result.key_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.memstore.PBNodeKeys)
    }
    
    static {
      defaultInstance = new PBNodeKeys(true);
      com.memstore.serialization.Serialization.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.memstore.PBNodeKeys)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_memstore_PBEntity_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_memstore_PBEntity_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_memstore_PBEntityTimeline_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_memstore_PBEntityTimeline_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_memstore_PBEntityTimelineValue_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_memstore_PBEntityTimelineValue_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_memstore_Tombstone_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_memstore_Tombstone_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_memstore_PBValue_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_memstore_PBValue_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_memstore_Keys_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_memstore_Keys_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_memstore_Key_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_memstore_Key_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_memstore_PBDateIndex_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_memstore_PBDateIndex_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_memstore_PBDateIndex_MarkList_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_memstore_PBDateIndex_MarkList_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_memstore_Header_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_memstore_Header_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_memstore_PBNodeKeys_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_memstore_PBNodeKeys_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\023serialization.proto\022\014com.memstore\"w\n\010P" +
      "BEntity\022\016\n\006bitmap\030\001 \002(\r\022\023\n\013poolIndexes\030\002" +
      " \003(\r\022\027\n\017notPooledBitmap\030\003 \001(\r\022-\n\016notPool" +
      "edValue\030\004 \003(\0132\025.com.memstore.PBValue\"T\n\020" +
      "PBEntityTimeline\022\014\n\004date\030\001 \003(\004\0222\n\005value\030" +
      "\002 \003(\0132#.com.memstore.PBEntityTimelineVal" +
      "ue\"k\n\025PBEntityTimelineValue\022*\n\ttombstone" +
      "\030\001 \001(\0132\027.com.memstore.Tombstone\022&\n\006entit" +
      "y\030\002 \001(\0132\026.com.memstore.PBEntity\"\013\n\tTombs" +
      "tone\"\255\001\n\007PBValue\022\016\n\006string\030\001 \001(\t\022\013\n\003int\030",
      "\002 \001(\005\022\014\n\004long\030\003 \001(\003\022*\n\ttombstone\030\004 \001(\0132\027" +
      ".com.memstore.Tombstone\022\017\n\007boolean\030\005 \001(\010" +
      "\022\016\n\006double\030\006 \001(\001\022\r\n\005bytes\030\007 \001(\014\022\r\n\005float" +
      "\030\010 \001(\002\022\014\n\004date\030\t \001(\003\"&\n\004Keys\022\036\n\003key\030\001 \003(" +
      "\0132\021.com.memstore.Key\"H\n\003Key\022\"\n\003key\030\001 \002(\013" +
      "2\025.com.memstore.PBValue\022\r\n\005index\030\002 \002(\r\022\016" +
      "\n\006length\030\003 \002(\r\"\226\001\n\013PBDateIndex\022\"\n\003key\030\001 " +
      "\003(\0132\025.com.memstore.PBValue\0220\n\004list\030\002 \003(\013" +
      "2\".com.memstore.PBDateIndex.MarkList\0321\n\010" +
      "MarkList\022\r\n\005dates\030\001 \003(\004\022\026\n\016tombstoneDate",
      "s\030\002 \003(\004\"\026\n\006Header\022\014\n\004size\030\001 \002(\r\"0\n\nPBNod" +
      "eKeys\022\"\n\003key\030\001 \003(\0132\025.com.memstore.PBValu" +
      "eB\034\n\032com.memstore.serialization"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_com_memstore_PBEntity_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_com_memstore_PBEntity_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_memstore_PBEntity_descriptor,
              new java.lang.String[] { "Bitmap", "PoolIndexes", "NotPooledBitmap", "NotPooledValue", },
              com.memstore.serialization.Serialization.PBEntity.class,
              com.memstore.serialization.Serialization.PBEntity.Builder.class);
          internal_static_com_memstore_PBEntityTimeline_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_com_memstore_PBEntityTimeline_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_memstore_PBEntityTimeline_descriptor,
              new java.lang.String[] { "Date", "Value", },
              com.memstore.serialization.Serialization.PBEntityTimeline.class,
              com.memstore.serialization.Serialization.PBEntityTimeline.Builder.class);
          internal_static_com_memstore_PBEntityTimelineValue_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_com_memstore_PBEntityTimelineValue_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_memstore_PBEntityTimelineValue_descriptor,
              new java.lang.String[] { "Tombstone", "Entity", },
              com.memstore.serialization.Serialization.PBEntityTimelineValue.class,
              com.memstore.serialization.Serialization.PBEntityTimelineValue.Builder.class);
          internal_static_com_memstore_Tombstone_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_com_memstore_Tombstone_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_memstore_Tombstone_descriptor,
              new java.lang.String[] { },
              com.memstore.serialization.Serialization.Tombstone.class,
              com.memstore.serialization.Serialization.Tombstone.Builder.class);
          internal_static_com_memstore_PBValue_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_com_memstore_PBValue_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_memstore_PBValue_descriptor,
              new java.lang.String[] { "String", "Int", "Long", "Tombstone", "Boolean", "Double", "Bytes", "Float", "Date", },
              com.memstore.serialization.Serialization.PBValue.class,
              com.memstore.serialization.Serialization.PBValue.Builder.class);
          internal_static_com_memstore_Keys_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_com_memstore_Keys_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_memstore_Keys_descriptor,
              new java.lang.String[] { "Key", },
              com.memstore.serialization.Serialization.Keys.class,
              com.memstore.serialization.Serialization.Keys.Builder.class);
          internal_static_com_memstore_Key_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_com_memstore_Key_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_memstore_Key_descriptor,
              new java.lang.String[] { "Key", "Index", "Length", },
              com.memstore.serialization.Serialization.Key.class,
              com.memstore.serialization.Serialization.Key.Builder.class);
          internal_static_com_memstore_PBDateIndex_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_com_memstore_PBDateIndex_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_memstore_PBDateIndex_descriptor,
              new java.lang.String[] { "Key", "List", },
              com.memstore.serialization.Serialization.PBDateIndex.class,
              com.memstore.serialization.Serialization.PBDateIndex.Builder.class);
          internal_static_com_memstore_PBDateIndex_MarkList_descriptor =
            internal_static_com_memstore_PBDateIndex_descriptor.getNestedTypes().get(0);
          internal_static_com_memstore_PBDateIndex_MarkList_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_memstore_PBDateIndex_MarkList_descriptor,
              new java.lang.String[] { "Dates", "TombstoneDates", },
              com.memstore.serialization.Serialization.PBDateIndex.MarkList.class,
              com.memstore.serialization.Serialization.PBDateIndex.MarkList.Builder.class);
          internal_static_com_memstore_Header_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_com_memstore_Header_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_memstore_Header_descriptor,
              new java.lang.String[] { "Size", },
              com.memstore.serialization.Serialization.Header.class,
              com.memstore.serialization.Serialization.Header.Builder.class);
          internal_static_com_memstore_PBNodeKeys_descriptor =
            getDescriptor().getMessageTypes().get(9);
          internal_static_com_memstore_PBNodeKeys_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_memstore_PBNodeKeys_descriptor,
              new java.lang.String[] { "Key", },
              com.memstore.serialization.Serialization.PBNodeKeys.class,
              com.memstore.serialization.Serialization.PBNodeKeys.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
